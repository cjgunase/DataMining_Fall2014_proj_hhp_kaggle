for( i in 1 : nrow(data)){
count<-0
for (j in 1:14 ) {
if(data[i,][j]=="?"){
count<-count+1
}
}
histvec<-c(histvec,count)
}
class(data$age)
class(data$type_employer)
class(data[,1])
for(i in 1:ncol(data)){
print (class(data[,i])
}
for(i in 1:ncol(data)){
print (class(data[,i]))
}
for(i in 1:ncol(data)){
print (paste(names(data)[i]," : ",class(data[,i])))
}
barplot(table(data[,1]))
barplot(table(data[,5]))
barplot(table(data[,13]))
hist(data[,3])
hist(data[,3],breaks=100)
min(data[,3])
max(data[,3])
max(data[,3])-min(data[,3])
(max(data[,3])-min(data[,3]))/100
hist(data[,3],breaks=seq(min(data[,3]),max(data[,3]),l=15000))
hist(data[,3],breaks=seq(min(data[,3]),max(data[,3]),l=15000))
hist(data[,3],breaks=seq(min(data[,3]),max(data[,3]),l=15000),freq=FALSE,col="orange",main="Histogram",
xlab="x",ylab="f(x)",yaxs="i",xaxs="i")
hist(data[,3],breaks=seq(min(data[,3]),max(data[,3]),l=100),freq=FALSE,col="orange",main="Histogram",
xlab="x",ylab="f(x)",yaxs="i",xaxs="i")
hist(data[,3],breaks=seq(min(data[,3]),max(data[,3]),l=15000),freq=FALSE,col="orange",main="Histogram",
xlab="x",ylab="f(x)",yaxs="i",xaxs="i")
hist(data[,3],freq=FALSE,col="orange",main="Histogram",
xlab="x",ylab="f(x)",yaxs="i",xaxs="i")
hist(data[,3],breaks=seq(min(data[,3]),max(data[,3]),l=15000),freq=FALSE,col="orange",main="Histogram",
xlab="x",ylab="f(x)",yaxs="i",xaxs="i")
hist(data[,3],breaks=seq(min(data[,3]),max(data[,3]),l=10),freq=FALSE,col="orange",main="Histogram",
xlab="x",ylab="f(x)",yaxs="i",xaxs="i")
hist(data[,3],breaks=seq(min(data[,3]),max(data[,3]),l=100),freq=FALSE,col="orange",main="Histogram",
xlab="x",ylab="f(x)",yaxs="i",xaxs="i")
hist(data[,3],breaks=seq(min(data[,3]),max(data[,3]),l=100),freq=FALSE,col="orange",main="Histogram for fnlwgt")
names(data)[5]
names(data)[13]
barplot(table(data[,13]),main="hr_per_week")
hist(data[,3],breaks=seq(min(data[,3]),max(data[,3]),l=100),freq=FALSE,col="orange",main="Histogram for fnlwgt")
data1<-data[data$income == '<=50K',]
data2<-data[data$income == '>50K',]
par(mfrow=c(2,2))
hist(data1[,1])
hist(data2[,1],main]"Age : >=50K")
hist(data2[,1],main="Age : >=50K")
dev.off()
hist(data1[,1],main="Age : <=50K")
?hist
hist(data1[,1],xlab="Age",main="Age : <=50K")
hist(data2[,1],xlab="Age",main="Age : >=50K")
dev.off()
names(data)[3]
names(data)[5]
names(data)[13]
par(mfrow=c(2,2))
par(mfrow=c(2,2))
boxplot(data1[,1])
boxplot(data2[,1])
boxplot(data1[,3])
boxplot(data2[,3])
dev.off()
par(mfrow=c(2,1))
boxplot(data1[,1])
boxplot(data2[,1])
par(mfrow=c(1,2))
boxplot(data1[,1])
boxplot(data2[,1])
par(mfrow=c(1,2))
boxplot(data1[,1],main="Age for <=50K")
boxplot(data2[,1],main="Age for >50K")
dev.off()
par(mfrow=c(1,2))
barplot(table(data[,2]))
barplot(table(data[,4]))
dev.off()
barplot(table(data[,2]),las=2)
par(mfrow=c(1,2))
dev.off()
names(data)[2]
barplot(table(data[,2]),las=2,xlab="type_employer")
dev.off()
barplot(table(data[,2]),las=2,title="type_employer")
barplot(table(data[,2]),las=2,main="type_employer")
par(mfrow=c(1,2))
barplot(table(data[,4]),las=2,main="type_employer for >50")
dev.off()
par(mfrow=c(1,2))
barplot(table(data[,2]),las=2,main="type_employer for <=50")
barplot(table(data[,4]),las=2,main="type_employer for >50")
dev.off()
barplot(table(data[,2]),las=2,main="type_employer for <=50")
barplot(table(data[,4]),las=2,main="type_employer for >50")
names(data)[2]
names(data)[4]
names(data)[6]
names(data)[7]
barplot(table(data[,7]),main="occupation")
barplot(table(data[,7]),las=2,main="occupation")
barplot(table(data[,6]),main="marital")
barplot(table(data[,6]),las=2,main="marital")
names(data)[8]
names(data)[9]
names(data)[10]
names(data)[11]
data$capital_gain
names(data)[11]
names(data)[12]
class(data$capital_gain)
names(data)[12]
names(data)[13]
names(data)[14]
barplot(table(data[,14]),las=2,main="country")
barplot(table(data[,14]),main="country")
barplot(table(data[,14]),las=2,main="country")
boxplot(data1[,11],main="hr per week for <=50K")
par(mfrow=c(1,2))
barplot(table(data1[,2]))
par(mfrow=c(1,2))
barplot(table(data1[,8]),las=2,main="marital for <=50K")
barplot(table(data2[,8]),las=2,main="marital for >50K")
dev.off()
par(mfrow=c(1,2))
barplot(table(data1[,10]),las=2,main="sex for <=50K")
barplot(table(data2[,10]),las=2,main="sex for >50K")
dev.off()
par(mfrow=c(1,2))
barplot(table(data1[,14]),las=2,main="sex for <=50K")
barplot(table(data2[,14]),las=2,main="country for >50K")
dev.off()
table(data[data$age < 20 ,]$occupation)
table(data[20 < data$age & data$age< 30 ,]$occupation)
table(data[30 < data$age & data$age< 40 ,]$occupation)
table(data[40 < data$age & data$age< 60 ,]$occupation)
table(data[data$age >60 ,]$occupation)
barplot(table(data[data$age < 20 ,]$occupation))
barplot(table(data[data$age < 20 ,]$occupation),las=2)
barplot(table(data[20 < data$age & data$age< 30 ,]$occupation),las=2)
barplot(table(data[30 < data$age & data$age< 40 ,]$occupation),las=2
)
barplot(table(data[40 < data$age & data$age< 60 ,]$occupation),las=2)
barplot(table(data[data$age >60 ,]$occupation),las=2)
barplot(table(data[40 < data$age & data$age< 60 ,]$occupation),las=2)
barplot(table(data[30 < data$age & data$age< 40 ,]$occupation),las=2)
barplot(table(data[data$age < 20 ,]$occupation),las=2)
barplot(table(data[30 < data$age & data$age< 40 ,]$occupation),las=2)
barplot(table(data[40 < data$age & data$age< 60 ,]$occupation),las=2)
barplot(table(data[data$age >60 ,]$occupation),las=2)
barplot(table(data[data$age < 20 ,]$occupation),las=2)
barplot(table(data[data$age < 20 ,]$occupation),las=2,main="age < 20")
barplot(table(data[40 < data$age & data$age< 60 ,]$occupation),las=2,main="40 < age < 60")
barplot(table(data[data$age >60 ,]$occupation),las=2,main="60 < age")
plot(data$age,data$education_num)
plot(data$age,data$hr_per_week)
plot(data$age,data$hr_per_week,xlab="age",ylab="hours per week",main="Hours per week vd Age")
```{r}
doit <- function(x) {
doit <- function(x) {
(x - min(x, na.rm=TRUE))/(max(x,na.rm=TRUE) -min(x, na.rm=TRUE))
}
}
doit <- function(x) {
(x - min(x, na.rm=TRUE))/(max(x,na.rm=TRUE) -min(x, na.rm=TRUE))
}
normed <- as.data.frame(lapply(mtcars, doit))
lapply(normed, range)
data<-mtcars
View(data)
data$carb
data$carb
doit(data$carb)
doit <- function(x) {
(x - min(x, na.rm=TRUE))/(max(x,na.rm=TRUE) -min(x, na.rm=TRUE))
}
doit(data$carb)
x<-data$carb
min_x<-min(x, na.rm=TRUE)
max_x<-max(x, na.rm=TRUE)
(x-min_x)/(max_x-min_x)
min_x<-min(x, na.rm=TRUE)+5
max_x<-max(x, na.rm=TRUE)+10
(x-min_x)/(max_x-min_x)
min_x<-min(x, na.rm=TRUE)
max_x<-max(x, na.rm=TRUE)
(x-min_x)/(max_x-min_x)
((x-min_x)/(max_x-min_x))*(5)+5
minmax <-function(x,min_lim,max_lim){
min_x<-min(x, na.rm=TRUE)
max_x<-max(x, na.rm=TRUE)
return(((x-min_x)/(max_x-min_x))*(max_lim-min_lim)+min_lim)
}
minmax(x,5,10)
minmax(x,0,1)
(x-mean(x))/sd(x)
x<-c(200, 300, 400, 600, 1000)
minmax(x,0,1)
(x-mean(x))/sd(x)
max(x)
(x-mean(x))/max(x)
x/10
data(iris)
View(data)
minmax(c(1.6,2.8,3.72,4.97),-1,1)
x<-c(1.6,2.8,3.72,4.97)
(x-mean(x))/sd(x)
View(iris)
iris$Petal.Length
x<-iris$Petal.Length
minmax(x,-1,1)
(x-mean(x))/sd(x)
pred<-c(1,0,0,1,1,1,0,0,1,0,0,0,1,1,0)
true<-c(1,1,0,0,1,0,0,1,0,0,1,0,0,1,0)
library(caret)
?confusionMatrix
confusionMatrix(pred,true)
table(Predictions = pred, TrueLabels = true)
table(TrueLabels = true,Predictions = pred)
confusion<-table(TrueLabels = true,Predictions = pred)
confusion
confusion[1,1]
confusion[2,1]
confusion[1,1]/(confusion[1,1]+confusion[2,2])
confusion[1,2]/(confusion[2,1]+confusion[1,2])
confusion[1,1]/(confusion[1,1]+confusion[2,2])
confusionMatrix(true,pred)
confusion
confusion
(confusion[1,1]+confusion[1,2])/(9+6)
(confusion[1,1]+confusion[1,2])/(8+7)
x<-c(200, 300, 400, 600, 1000)
minmax(x,0,1)
x<-c(200, 300, 400, 600, 1000)
(x-mean(x))/mad(x)
data(iris)
x<-iris$Petal.Length
minmax(x,-1,1)
(x-mean(x))/sd(x)
data(iris)
x<-iris$Petal.Length
mean(x)
min_x<-min(x, na.rm=TRUE)
data(iris)
x<-iris$Petal.Length
y<-c(1.6,2.8,3.72,4.97)
min_x<-min(x, na.rm=TRUE)
max_x<-max(x, na.rm=TRUE)
min_lim=-1
max_lim=1
((y-min_x)/(max_x-min_x))*(max_lim-min_lim)+min_lim
(y-mean(x))/sd(x)
rm(list=ls())
Overall_GPA <-c(3.4,3.55,NA,3.20,3.45,3.8,2.75,3.33,3.9,3.67)
mean(Overall_GPA)
Overall_GPA <-c(3.4,3.55,0,3.20,3.45,3.8,2.75,3.33,3.9,3.67)
mean(Overall_GPA)
Major_GPA <-c(3.68,3.75,3.52,3.30,3.06,3.18,3.86,3.36)
lm(Overall_GPA~Major_GPA)
Overall_GPA <-c(3.4,3.55,3.20,3.45,2.75,3.33,3.9,3.67)
Major_GPA <-c(3.68,3.75,3.52,3.30,3.06,3.18,3.86,3.36)
length(Overall_GPA)
length(Major_GPA)
Major_GPA <-c(3.68,3.75,3.52,3.30,3.06,3.18,3.86,3.36)
Overall_GPA <-c(3.4,3.55,3.20,3.45,2.75,3.33,3.9,3.67)
lm(Overall_GPA~Major_GPA)
model<-lm(Overall_GPA~Major_GPA)
predict(model,3.93)
3.93*0.8350 + 0.5142
model<-lm(Major_GPA~Overall_GPA)
model
predict(model)
predict(model,3.93)
predict(3.93,model)
?predict
predict.lm(model,3.93)
model<-lm(Overall_GPA~Major_GPA)
model
3.93*0.8350 + 0.5142
model<-lm(Major_GPA~Overall_GPA)
model
3.93*0.584 + 1.475
mean(Overall_GPA)
Overall_GPA <-c(3.4,3.55,3.20,3.45,2.75,3.33,3.9,3.67)
mean(Overall_GPA)
Major_GPA <-c(3.68,3.75,3.52,3.30,3.06,3.18,3.86,3.36)
mean(Major_GPA)
3.80*0.584 + 1.475
model<-lm(Overall_GPA~Major_GPA)
model
3.93*0.8350 + 0.5142
model<-lm(Major_GPA~Overall_GPA)
model
3.80*0.584 + 1.475
Overall_GPA <-c(3.4,3.55,3.77,3.20,3.45,2.75,3.33,3.9,3.67)
Major_GPA <-c(3.68,3.75,3.52,3.30,3.06,3.77,3.18,3.86,3.36)
summary(Overall_GPA)
summary(Major_GPA)
pred <- prediction(pred_prob,true_class)
library(ROCR)
pred <- prediction(pred_prob,true_class)
pred_prob<-c(0.64,0.57,0.92,0.48,0.82,0.35,0.75,0.69,0.82,0.33)
true_class<-c(0,1,1,0,0,1,1,1,0,0)
library(ROCR)
pred <- prediction(pred_prob,true_class)
perf <- performance(pred, "tpr", "fpr")
plot(perf)
perf
pred_class<-pred_prob>0.5
library(caret)
confusionMatrix(pred_class,true_class)
pred_class<-as.numeric(pred_prob>0.5)
true_class<-c(0,1,1,0,0,1,1,1,0,0)
library(caret)
confusionMatrix(pred_class,true_class)
confusionMatrix(pred_class,true_class,positive="1")
w=c(1,3,2)
b=5
x1=c(3,-2,1)
t(x)*x1
x1=c(3,-2,1)
t(x)*x1
t(w)*x1
sum(t(w)*x1)
sum(t(w)*x1)+5
x2=c(-2,0.5,-2)
x2=c(-2,0.5,-2)
sum(t(w)*x2)+b
x3=c(-3,-3,4)
sum(t(w)*x3)+5
sample(1:10,replace=T)
swirl
install.packages(swirl)
install.packages("swirl")
swirl
swirl()
library(swirl)
swirl()
Overall_GPA <-c(3.4,3.55,3.20,3.45,2.75,3.33,3.9,3.67)
mean(Overall_GPA)
Major_GPA <-c(3.68,3.75,3.52,3.30,3.06,3.18,3.86,3.36)
mean(Major_GPA)
Overall_GPA-Major_GPA
abs(Overall_GPA-Major_GPA)
mean(abs(Overall_GPA-Major_GPA))
(3.4+3.90)/2
3.93-0.22
log2(0.5)
-log2(4/6)-log2(2/6)
-(4/6)*log2(4/6)-(2/6)*log2(2/6)
-(3/4)*log2(3/4)-(1/4)*log2(1/4)
-(1/2)*log2(1/2)-(1/2)*log2(1/2)
(6/10)*0.9182 + (4/10)*0.8112
install.packages("RMySQL")
library(RMySQL)
mydb = dbConnect(MySQL(), user='root', password='root', dbname='events', host='141.219.190.19')
mydb = dbConnect(MySQL(), user='root', password='root', dbname='events', host='141.219.190.19')
mydb = dbConnect(MySQL(), user='root', password='root', dbname='events', host='141.219.190.19')
mydb = dbConnect(MySQL(), user='root', password='root', dbname='events', host='141.219.190.19',port='3306')
mydb = dbConnect(MySQL(), user='root', password='root', dbname='events', host='141.219.190.19',port=3306)
mydb = dbConnect(MySQL(), user='root', password='root', dbname='events', host='141.219.190.19',port=3306)
dbListTables(mydb)
dbSendQuery(mydb, 'CREATE DATABASE HHP_comp,GO,USE HHP_comp')
mydb = dbConnect(MySQL(), user='root', password='root', dbname='HHP_comp', host='141.219.190.19',port=3306)
install.packages("RMySQL")
install.packages("RMySQL")
library(RMySQL)
mydb = dbConnect(MySQL(), user='root', password='root', dbname='HHP_comp', host='141.219.190.19',port=3306)
dbListTables(mydb)
dbSendQuery(mydb, 'use HHP_comp')
dbListTables(mydb)
rm(list=ls())
data.frame(x1,x2,G)
x1<-c(1,1,0,2,5,6,4,5)
x2<-c(4,3,4,5,1,2,0,2)
G<-c(1,1,2,2,1,2,1,2)
data.frame(x1,x2,G)
plot(x1,x2)
text(x1+0.05, x2, labels=names)
text(x1[2]-0.05, x2[2], labels=names[2])
x1
names = c("1", "2", "3", "4", "5","6","7","8")
text(x1+0.05, x2, labels=names)
text(x1[2]-0.05, x2[2], labels=names[2])
plot(x1,x2)
plot(x1,x2)
text(x1+0.05, x2, labels=names)
text(x1[2]-0.05, x2[2], labels=names[2])
plot(x1,x2)
text(x1+0.05, x2, labels=names)
plot(x1,x2)
text(x1+0.09, x2, labels=names)
text(x1+0.2, x2, labels=names)
plot(x1,x2)
text(x1+0.3, x2, labels=names)
plot(x1,x2)
text(x1+0.2, x2, labels=names)
text(x1[2]-0.05, x2[2], labels=names[2])
plot(x1,x2)
text(x1+0.2, x2, labels=names)
names = c("1", "1", "2", "2", "1","2","1","2")
plot(x1,x2)
text(x1+0.2, x2, labels=names)
set.seed(0)
x = rbind(matrix(rnorm(2*100,sd=0.2),ncol=2),
scale(matrix(rnorm(2*100,sd=0.3),ncol=2),cent=-c(1,1),scal=F),
scale(matrix(rnorm(2*100,sd=0.2),ncol=2),cent=-c(0,1),scal=F))
k <- 3
centers.init <- rbind(c(0.5,1),c(1,0),c(0,0.5))
colors <- c("red", "darkgreen", "blue")
plot(x, xlab="x1", ylab="x2")
points(centers.init,pch=19,cex=2,col=colors)
km = kmeans(x,centers=centers.init,alg="Lloyd")
kmtrace = list();
for (i in 1:km$iter) {
kmtrace[[i]] = kmeans(x, centers=centers.init, alg="Lloyd", iter.max=i)
}
for (i in 1:km$iter) {
# Plot the new clusters
plot(x, col=colors[kmtrace[[i]]$cluster], main=paste("Iteration", i, "a"),xlab="x1", ylab="x2")
if (i==1) {
points(centers.init, pch=19, cex=2, col=colors)
} else {
points(kmtrace[[i-1]]$centers, pch=19, cex=2, col=colors)
}
# Plot the new centers
plot(x, col=colors[kmtrace[[i]]$cluster], main=paste("Iteration", i, "b"), xlab="x1", ylab="x2")
points(kmtrace[[i]]$centers, pch=19, cex=2, col=colors)
}
￼library(arules) # Association rules. library(dplyr)
install.packages("arules")
install.packages("dplyr")
library(dplyr)
fname       <- "http://www.biz.uiowa.edu/faculty/jledolter/DataMining/lastfm.csv"
lastfm      <- read.csv(fname, stringsAsFactors=FALSE)
View(lastfm)
dspath <- "http://rattle.togaware.com/weather.csv"
rm(list=ls())
dspath <- "http://rattle.togaware.com/weather.csv"
weather <- read.csv(dspath)
library(rattel)
install.packages("rattle")
library(rattel)
library(rattle)
dim(weather)
names(weather)
View(weather)
str(weather)
ds <-get(dsname)
dsname <-"weather"
ds <-get(dsname)
ds
?get
ds
weather
class(ds)
ds<-tbl_df(ds)
ds
class(ds)
?tbl_df
?tbl_df
sample(nrow(ds))
sample(nrow(ds),6)
sample(nrow(ds),6)
ds[sample(nrow(ds),6),]
names(ds)
names(ds)<-normVarNames(names(ds))
sapply(ds,class)
library(libricate)
install.packages("lubricate")
install.packages("lubridate")
library(libridate)
library(lubridate)
head(ds$date)
head(ds$date)
ds$date <-ymd(as.character(ds$date))
ds$date
head(ds$date)
sapply(ds,class)
sapply(ds,class)
ignore <- union(id, if (exists("risk")) risk)
names(ds)
ignore <- union(id, if (exists("risk")) risk)
vars  <- names(ds)
vars
target <- "rain_tomorrow"
risk   <- "risk_mm"
id     <- c("date", "location")
ignore <- union(id, if (exists("risk")) risk)
ignore
ids   <- which(sapply(ds, function(x) length(unique(x))) == nrow(ds))
ids
sapply(ds, function(x) length(unique(x))) == nrow(ds)
ids   <- which(sapply(ds, function(x) length(unique(x))) == nrow(ds))
ids
?which
which(1,0,0)
which(T,F,T)
which(F,F,T)
mode(sapply(ds, function(x) length(unique(x))) == nrow(ds))
setwd("~/Documents/Git/hhp_kaggle")
source("calc_error.R")
alldata <- read.csv("modeling_set1.csv")
